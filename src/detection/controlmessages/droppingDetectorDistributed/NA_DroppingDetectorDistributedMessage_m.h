//
// Generated file, do not edit! Created by nedtool 4.6 from detection/controlmessages/droppingDetectorDistributed/NA_DroppingDetectorDistributedMessage.msg.
//

#ifndef _NA_DROPPINGDETECTORDISTRIBUTEDMESSAGE_M_H_
#define _NA_DROPPINGDETECTORDISTRIBUTEDMESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>detection/controlmessages/droppingDetectorDistributed/NA_DroppingDetectorDistributedMessage.msg:26</tt> by nedtool.
 * <pre>
 * message NA_DroppingDetectorDistributedMessage
 * {
 *     simtime_t timestamp;
 *     bool RTS;
 *     bool CTS;
 *     bool DATA;
 *     bool RREQ;
 *     uint32_t SrcIPAdd;
 *     uint32_t DstIPAdd;
 *     uint64_t SrcMACAdd;
 *     uint64_t DstMACAdd;
 *     uint32_t OrgAdd;
 * 
 *     //used for windows switching self messages from the controller
 *     int index;
 * }
 * </pre>
 */
class NA_DroppingDetectorDistributedMessage : public ::cMessage
{
  protected:
    simtime_t timestamp_var;
    bool RTS_var;
    bool CTS_var;
    bool DATA_var;
    bool RREQ_var;
    uint32_t SrcIPAdd_var;
    uint32_t DstIPAdd_var;
    uint64_t SrcMACAdd_var;
    uint64_t DstMACAdd_var;
    uint32_t OrgAdd_var;
    int index_var;

  private:
    void copy(const NA_DroppingDetectorDistributedMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NA_DroppingDetectorDistributedMessage&);

  public:
    NA_DroppingDetectorDistributedMessage(const char *name=NULL, int kind=0);
    NA_DroppingDetectorDistributedMessage(const NA_DroppingDetectorDistributedMessage& other);
    virtual ~NA_DroppingDetectorDistributedMessage();
    NA_DroppingDetectorDistributedMessage& operator=(const NA_DroppingDetectorDistributedMessage& other);
    virtual NA_DroppingDetectorDistributedMessage *dup() const {return new NA_DroppingDetectorDistributedMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual simtime_t getTimestamp() const;
    virtual void setTimestamp(simtime_t timestamp);
    virtual bool getRTS() const;
    virtual void setRTS(bool RTS);
    virtual bool getCTS() const;
    virtual void setCTS(bool CTS);
    virtual bool getDATA() const;
    virtual void setDATA(bool DATA);
    virtual bool getRREQ() const;
    virtual void setRREQ(bool RREQ);
    virtual uint32_t getSrcIPAdd() const;
    virtual void setSrcIPAdd(uint32_t SrcIPAdd);
    virtual uint32_t getDstIPAdd() const;
    virtual void setDstIPAdd(uint32_t DstIPAdd);
    virtual uint64_t getSrcMACAdd() const;
    virtual void setSrcMACAdd(uint64_t SrcMACAdd);
    virtual uint64_t getDstMACAdd() const;
    virtual void setDstMACAdd(uint64_t DstMACAdd);
    virtual uint32_t getOrgAdd() const;
    virtual void setOrgAdd(uint32_t OrgAdd);
    virtual int getIndex() const;
    virtual void setIndex(int index);
};

inline void doPacking(cCommBuffer *b, NA_DroppingDetectorDistributedMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NA_DroppingDetectorDistributedMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _NA_DROPPINGDETECTORDISTRIBUTEDMESSAGE_M_H_

