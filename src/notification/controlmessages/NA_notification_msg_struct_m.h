//
// Generated file, do not edit! Created by nedtool 4.6 from notification/controlmessages/NA_notification_msg_struct.msg.
//

#ifndef _NA_NOTIFICATION_MSG_STRUCT_M_H_
#define _NA_NOTIFICATION_MSG_STRUCT_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>notification/controlmessages/NA_notification_msg_struct.msg:10</tt> by nedtool.
 * <pre>
 * packet NotificationMsg
 * {
 *     uint8_t tipoMensaje;
 *     uint8_t longitudTotal;
 *     uint32_t idMensaje;
 *     uint32_t idSrc;
 *     uint8_t ttl;
 * }
 * </pre>
 */
class NotificationMsg : public ::cPacket
{
  protected:
    uint8_t tipoMensaje_var;
    uint8_t longitudTotal_var;
    uint32_t idMensaje_var;
    uint32_t idSrc_var;
    uint8_t ttl_var;

  private:
    void copy(const NotificationMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NotificationMsg&);

  public:
    NotificationMsg(const char *name=NULL, int kind=0);
    NotificationMsg(const NotificationMsg& other);
    virtual ~NotificationMsg();
    NotificationMsg& operator=(const NotificationMsg& other);
    virtual NotificationMsg *dup() const {return new NotificationMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint8_t getTipoMensaje() const;
    virtual void setTipoMensaje(uint8_t tipoMensaje);
    virtual uint8_t getLongitudTotal() const;
    virtual void setLongitudTotal(uint8_t longitudTotal);
    virtual uint32_t getIdMensaje() const;
    virtual void setIdMensaje(uint32_t idMensaje);
    virtual uint32_t getIdSrc() const;
    virtual void setIdSrc(uint32_t idSrc);
    virtual uint8_t getTtl() const;
    virtual void setTtl(uint8_t ttl);
};

inline void doPacking(cCommBuffer *b, NotificationMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NotificationMsg& obj) {obj.parsimUnpack(b);}

/**
 * Struct generated from notification/controlmessages/NA_notification_msg_struct.msg:19 by nedtool.
 */
struct AlertMsg_extension
{
    AlertMsg_extension();
    uint8_t tipo;
    uint8_t longitud;
    uint8_t datos;
};

void doPacking(cCommBuffer *b, AlertMsg_extension& a);
void doUnpacking(cCommBuffer *b, AlertMsg_extension& a);

/**
 * Class generated from <tt>notification/controlmessages/NA_notification_msg_struct.msg:26</tt> by nedtool.
 * <pre>
 * packet AlertMsg extends NotificationMsg
 * {
 *     uint8_t evento;
 *     uint8_t severidad;
 *     uint8_t confiabilidad;
 *     uint32_t idMalicioso;
 *     //	string maliciousNode;
 *     double marcaTemporal;
 *     AlertMsg_extension alertExtension[];
 * }
 * </pre>
 */
class AlertMsg : public ::NotificationMsg
{
  protected:
    uint8_t evento_var;
    uint8_t severidad_var;
    uint8_t confiabilidad_var;
    uint32_t idMalicioso_var;
    double marcaTemporal_var;
    AlertMsg_extension *alertExtension_var; // array ptr
    unsigned int alertExtension_arraysize;

  private:
    void copy(const AlertMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AlertMsg&);

  public:
    AlertMsg(const char *name=NULL, int kind=0);
    AlertMsg(const AlertMsg& other);
    virtual ~AlertMsg();
    AlertMsg& operator=(const AlertMsg& other);
    virtual AlertMsg *dup() const {return new AlertMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint8_t getEvento() const;
    virtual void setEvento(uint8_t evento);
    virtual uint8_t getSeveridad() const;
    virtual void setSeveridad(uint8_t severidad);
    virtual uint8_t getConfiabilidad() const;
    virtual void setConfiabilidad(uint8_t confiabilidad);
    virtual uint32_t getIdMalicioso() const;
    virtual void setIdMalicioso(uint32_t idMalicioso);
    virtual double getMarcaTemporal() const;
    virtual void setMarcaTemporal(double marcaTemporal);
    virtual void setAlertExtensionArraySize(unsigned int size);
    virtual unsigned int getAlertExtensionArraySize() const;
    virtual AlertMsg_extension& getAlertExtension(unsigned int k);
    virtual const AlertMsg_extension& getAlertExtension(unsigned int k) const {return const_cast<AlertMsg*>(this)->getAlertExtension(k);}
    virtual void setAlertExtension(unsigned int k, const AlertMsg_extension& alertExtension);
};

inline void doPacking(cCommBuffer *b, AlertMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AlertMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>notification/controlmessages/NA_notification_msg_struct.msg:37</tt> by nedtool.
 * <pre>
 * packet AlertMsgAdaptation extends NotificationMsg
 * {
 *     uint8_t evento;
 *     uint8_t severidad;
 *     uint8_t confiabilidad;
 *     string maliciousNode;
 *     double marcaTemporal;
 *     AlertMsg_extension alertExtension[];
 * }
 * </pre>
 */
class AlertMsgAdaptation : public ::NotificationMsg
{
  protected:
    uint8_t evento_var;
    uint8_t severidad_var;
    uint8_t confiabilidad_var;
    opp_string maliciousNode_var;
    double marcaTemporal_var;
    AlertMsg_extension *alertExtension_var; // array ptr
    unsigned int alertExtension_arraysize;

  private:
    void copy(const AlertMsgAdaptation& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AlertMsgAdaptation&);

  public:
    AlertMsgAdaptation(const char *name=NULL, int kind=0);
    AlertMsgAdaptation(const AlertMsgAdaptation& other);
    virtual ~AlertMsgAdaptation();
    AlertMsgAdaptation& operator=(const AlertMsgAdaptation& other);
    virtual AlertMsgAdaptation *dup() const {return new AlertMsgAdaptation(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint8_t getEvento() const;
    virtual void setEvento(uint8_t evento);
    virtual uint8_t getSeveridad() const;
    virtual void setSeveridad(uint8_t severidad);
    virtual uint8_t getConfiabilidad() const;
    virtual void setConfiabilidad(uint8_t confiabilidad);
    virtual const char * getMaliciousNode() const;
    virtual void setMaliciousNode(const char * maliciousNode);
    virtual double getMarcaTemporal() const;
    virtual void setMarcaTemporal(double marcaTemporal);
    virtual void setAlertExtensionArraySize(unsigned int size);
    virtual unsigned int getAlertExtensionArraySize() const;
    virtual AlertMsg_extension& getAlertExtension(unsigned int k);
    virtual const AlertMsg_extension& getAlertExtension(unsigned int k) const {return const_cast<AlertMsgAdaptation*>(this)->getAlertExtension(k);}
    virtual void setAlertExtension(unsigned int k, const AlertMsg_extension& alertExtension);
};

inline void doPacking(cCommBuffer *b, AlertMsgAdaptation& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AlertMsgAdaptation& obj) {obj.parsimUnpack(b);}

/**
 * Struct generated from notification/controlmessages/NA_notification_msg_struct.msg:47 by nedtool.
 */
struct REQMsg_extension
{
    REQMsg_extension();
    uint8_t idProtocolo;
    uint32_t idVariable;
};

void doPacking(cCommBuffer *b, REQMsg_extension& a);
void doUnpacking(cCommBuffer *b, REQMsg_extension& a);

/**
 * Class generated from <tt>notification/controlmessages/NA_notification_msg_struct.msg:53</tt> by nedtool.
 * <pre>
 * packet REQMsg extends NotificationMsg
 * {
 *     uint16_t nodos;
 *     uint16_t variables;
 *     uint32_t idNodoSolicitado[];
 *     REQMsg_extension reqExtension[];
 * }
 * </pre>
 */
class REQMsg : public ::NotificationMsg
{
  protected:
    uint16_t nodos_var;
    uint16_t variables_var;
    uint32_t *idNodoSolicitado_var; // array ptr
    unsigned int idNodoSolicitado_arraysize;
    REQMsg_extension *reqExtension_var; // array ptr
    unsigned int reqExtension_arraysize;

  private:
    void copy(const REQMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const REQMsg&);

  public:
    REQMsg(const char *name=NULL, int kind=0);
    REQMsg(const REQMsg& other);
    virtual ~REQMsg();
    REQMsg& operator=(const REQMsg& other);
    virtual REQMsg *dup() const {return new REQMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint16_t getNodos() const;
    virtual void setNodos(uint16_t nodos);
    virtual uint16_t getVariables() const;
    virtual void setVariables(uint16_t variables);
    virtual void setIdNodoSolicitadoArraySize(unsigned int size);
    virtual unsigned int getIdNodoSolicitadoArraySize() const;
    virtual uint32_t getIdNodoSolicitado(unsigned int k) const;
    virtual void setIdNodoSolicitado(unsigned int k, uint32_t idNodoSolicitado);
    virtual void setReqExtensionArraySize(unsigned int size);
    virtual unsigned int getReqExtensionArraySize() const;
    virtual REQMsg_extension& getReqExtension(unsigned int k);
    virtual const REQMsg_extension& getReqExtension(unsigned int k) const {return const_cast<REQMsg*>(this)->getReqExtension(k);}
    virtual void setReqExtension(unsigned int k, const REQMsg_extension& reqExtension);
};

inline void doPacking(cCommBuffer *b, REQMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, REQMsg& obj) {obj.parsimUnpack(b);}

/**
 * Struct generated from notification/controlmessages/NA_notification_msg_struct.msg:61 by nedtool.
 */
struct REPMsg_extension
{
    REPMsg_extension();
    uint8_t idProtocolo;
    uint32_t idVariable;
    uint32_t valorVariable;
};

void doPacking(cCommBuffer *b, REPMsg_extension& a);
void doUnpacking(cCommBuffer *b, REPMsg_extension& a);

/**
 * Class generated from <tt>notification/controlmessages/NA_notification_msg_struct.msg:68</tt> by nedtool.
 * <pre>
 * packet REPMsg extends NotificationMsg
 * {
 *     uint16_t nodos;
 *     uint16_t variables;
 *     uint32_t idNodoSolicitante;
 *     uint32_t idNodoInformado[];
 *     REPMsg_extension repExtension[];
 * }
 * </pre>
 */
class REPMsg : public ::NotificationMsg
{
  protected:
    uint16_t nodos_var;
    uint16_t variables_var;
    uint32_t idNodoSolicitante_var;
    uint32_t *idNodoInformado_var; // array ptr
    unsigned int idNodoInformado_arraysize;
    REPMsg_extension *repExtension_var; // array ptr
    unsigned int repExtension_arraysize;

  private:
    void copy(const REPMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const REPMsg&);

  public:
    REPMsg(const char *name=NULL, int kind=0);
    REPMsg(const REPMsg& other);
    virtual ~REPMsg();
    REPMsg& operator=(const REPMsg& other);
    virtual REPMsg *dup() const {return new REPMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint16_t getNodos() const;
    virtual void setNodos(uint16_t nodos);
    virtual uint16_t getVariables() const;
    virtual void setVariables(uint16_t variables);
    virtual uint32_t getIdNodoSolicitante() const;
    virtual void setIdNodoSolicitante(uint32_t idNodoSolicitante);
    virtual void setIdNodoInformadoArraySize(unsigned int size);
    virtual unsigned int getIdNodoInformadoArraySize() const;
    virtual uint32_t getIdNodoInformado(unsigned int k) const;
    virtual void setIdNodoInformado(unsigned int k, uint32_t idNodoInformado);
    virtual void setRepExtensionArraySize(unsigned int size);
    virtual unsigned int getRepExtensionArraySize() const;
    virtual REPMsg_extension& getRepExtension(unsigned int k);
    virtual const REPMsg_extension& getRepExtension(unsigned int k) const {return const_cast<REPMsg*>(this)->getRepExtension(k);}
    virtual void setRepExtension(unsigned int k, const REPMsg_extension& repExtension);
};

inline void doPacking(cCommBuffer *b, REPMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, REPMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef _NA_NOTIFICATION_MSG_STRUCT_M_H_

